#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: Samuel Chong
MW 10:30-11:50
Olac Fuentes
TAs: Anindita Nath and Maliheh Zargaran
Compares 2 words and checks the similarities using bst or hash table
"""

import numpy as np
import time
import math
# Implementation of hash tables with chaining using strings

####################### HASH TABLE ###############################
class HashTableC(object):
    # Builds a hash table of size 'size'
    # Item is a list of (initially empty) lists
    # Constructor
    def __init__(self,size):  
        self.item = []
        self.num_items = 0
        for i in range(size):
            self.item.append([])
        
def InsertC(H,k,l):
    # Inserts k in appropriate bucket (list) 
    # Does nothing if k is already in the table
    b = h(k,len(H.item))
    H.item[b].append([k,l]) 
   
def FindC(H,k):
    # Returns bucket (b) and index (i) 
    # If k is not in table, i == -1
    b = h(k,len(H.item))
    for i in range(len(H.item[b])):
        if H.item[b][i][0] == k:
            return b, i, H.item[b][i][1]
    return b, -1, -1
 
def h(s,n):
    r = 0
    for c in s:
        r = (r*255 + ord(c))% n
    return r


def mainHash(F, F2):
    print("Building hash table.")
    H = HashTableC(15) #create size 15
    print("Initial table size: ")
    print(len(H.item))
    for line in F:  # read line by line, glove
        word = line.split(' ')
        #H = InsertC(H, word)  # insert data using the InsertC method
    print("Total elements: ")
    print(H.num_items)
    print("Final table size: ")
    print(len(H.item))
    print("Load factor: ")
    print( H.num_items/len(H.item))
    start = time.time()
    for line2 in F2:
        word2 = line2.split(',')
        st = FindC(H, word2[0])
        str1 = FindC(H, word2[1])
        print("Similarity", word2[0:2], " = ", round(np.sum(st*str1)/(math.sqrt(np.sum(st*st))*math.sqrt(np.sum(str1*str1))),4)) #compute the similarity
    end = time.time()
    print("Running time for hash table query processing: ")
    print(end-start)


####################### BINARY SEARCH TREE ###############################
class BST(object):
    # Constructor
    def __init__(self, item, left=None, right=None):  
        self.item = item
        self.left = left 
        self.right = right      
        
def Insert(T,newItem):
    if T == None:
        T =  BST(newItem)
    elif T.item > newItem:
        T.left = Insert(T.left,newItem)
    else:
        T.right = Insert(T.right,newItem)
    return T
          

def Find(T,k):
    # Returns the address of k in BST, or None if k is not in the tree
    if T is None or T.item == k:
        return T
    if T.item<k:
        return Find(T.right,k)
    return Find(T.left,k)


def wordSearch(T,k):
    temp = T
    while temp is not None: #go through the tree
        if temp.item[0] == k: #if the items are the same
            temp.item[1]
            return temp.item[1]
        elif temp.item[0] < k: #if the item is larger then go rigtht
            temp = temp.right
        else: #else go left if smaller
            temp = temp.left 
    return None
    
def getHeight(T):
    if T is None: #if it is empty return 0
        return 0
    count = 0
    current = T
    while current is not None: #while the tree is not empty
        count = count + 1 #add 1 everytime it iterates
        if T.left is not None: # if the left side is not None then go left
            current = current.left
        elif T.right is not None:#if the right side is not None then go right
            current = current.right
    return count #return the counter
    
def numNodes(T):
    if T is None:
        return 0
    if T is not None:
        return 1 + numNodes(T.left) + numNodes(T.right)
    return 0


def bst(F, F2):
    start = time.time()
    T = None
    print("Building binary search tree.")
    for line in F: #go line by line
        word = line.split(' ')
        T = Insert(T, [word[0], np.array(word[1:],dtype=float)])  
    end = time.time()
    print("Binary Search Tree stats:")
    print("Number of nodes: ")
    print(numNodes)
    print("Height: ")
    print(getHeight(T))
    print("Running time for binary search tree construction: ")
    print(end - start)
    start1 = time.time()
    for line2 in F2:
        word2 = line2.split(',') #since the words are separated by a ,
        st = wordSearch(T, word2[0])
        str1 = wordSearch(T, word2[1])
        print("Similarity", word2[0:2], " = ", round(np.sum(st*str1)/(math.sqrt(np.sum(st*st))*math.sqrt(np.sum(str1*str1))),4)) #compute the similarity
    end1 = time.time()
    print("Running time for binary search tree query processing: ")
    print (end1 - start1)
 
    
answer = input(" Choose '1' for Binary Search Tree or '2' for Hash Table: ")

file = open('glove.6B.50d.txt', encoding='utf-8')
myfile = open('words.txt', encoding='utf-8')

if answer == '1':
    print("You have chosen the Binary Search Tree")
    bst(file, myfile)
elif answer == '2':
    print("You have chosen Hash Table")
    mainHash(file, myfile)
    
file.close()
myfile.close()
